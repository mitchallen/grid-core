{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["/**\n    Module: @mitchallen/grid-core/src/index.js\n    Author: Mitch Allen\n*/\n\n/*jshint node: true */\n/*jshint esversion: 6 */\n\n\"use strict\";\n\nmodule.exports.create = (spec = {}) => {\n\n    let { rows: _rows = 0} = spec;\n    _rows = Math.max( _rows, 0 );\n\n    var _array = [];\n    while(_array.push([]) < _rows);\n\n    var obj = Object.create({}, {\n        \"rows\": {\n            writeable: false,\n            value: _rows,\n            enumerable: true\n        },\n    });\n\n    return Object.assign( obj, {\n\n        log: function() { \n            console.log(\"size: %d: \", _rows );\n            console.log(_array); \n        },\n        rowSize: function(row) {\n            if( row < 0 || row >= _rows ) {\n                return 0;\n            }\n            return _array[row].length;\n        },\n        isCell: function(a,b) {\n            var rs = this.rowSize(a);\n            return a >= 0 && a < _rows && b >= 0 && b < rs;\n        },\n        set: function(a,b,value) {\n            // problem for sparse arrays\n            // if(!this.isCell(a,b)) { return false; }\n            if(a < 0 || b < 0 ) return false;\n            _array[a][b] = value;\n            return true;\n        },\n        get: function(a,b) {\n            if(!this.isCell(a,b)) { return null; }\n            return _array[a][b];\n        },\n        fill: function(value) {\n            for(var row = 0; row < _rows; row++) {\n                var rs = this.rowSize(row);\n                for(var pos = 0; pos < rs; pos++) {\n                    _array[row][pos] = value;\n                }\n            }\n        },\n        cloneArray: function() {\n            var _clone = [];\n            while(_clone.push([]) < _rows);\n            for(var row = 0; row < _rows; row++) {\n                var rs = this.rowSize(row);\n                for(var pos = 0; pos < rs; pos++) {\n                    _clone[row][pos] = _array[row][pos];\n                }\n            }\n            return _clone;\n        }\n    });\n\n};"],
  "mappings": "aAUA,OAAO,QAAQ,OAAS,CAACA,EAAO,CAAC,IAAM,CAEnC,GAAI,CAAE,KAAMC,EAAQ,CAAC,EAAID,EACzBC,EAAQ,KAAK,IAAKA,EAAO,CAAE,EAG3B,QADIC,EAAS,CAAC,EACRA,EAAO,KAAK,CAAC,CAAC,EAAID,GAAM,CAE9B,IAAIE,EAAM,OAAO,OAAO,CAAC,EAAG,CACxB,KAAQ,CACJ,UAAW,GACX,MAAOF,EACP,WAAY,EAChB,CACJ,CAAC,EAED,OAAO,OAAO,OAAQE,EAAK,CAEvB,IAAK,UAAW,CACZ,QAAQ,IAAI,aAAcF,CAAM,EAChC,QAAQ,IAAIC,CAAM,CACtB,EACA,QAAS,SAASE,EAAK,CACnB,OAAIA,EAAM,GAAKA,GAAOH,EACX,EAEJC,EAAOE,CAAG,EAAE,MACvB,EACA,OAAQ,SAASC,EAAEC,EAAG,CAClB,IAAIC,EAAK,KAAK,QAAQF,CAAC,EACvB,OAAOA,GAAK,GAAKA,EAAIJ,GAASK,GAAK,GAAKA,EAAIC,CAChD,EACA,IAAK,SAASF,EAAEC,EAAEE,EAAO,CAGrB,OAAGH,EAAI,GAAKC,EAAI,EAAW,IAC3BJ,EAAOG,CAAC,EAAEC,CAAC,EAAIE,EACR,GACX,EACA,IAAK,SAASH,EAAEC,EAAG,CACf,OAAI,KAAK,OAAOD,EAAEC,CAAC,EACZJ,EAAOG,CAAC,EAAEC,CAAC,EADa,IAEnC,EACA,KAAM,SAASE,EAAO,CAClB,QAAQJ,EAAM,EAAGA,EAAMH,EAAOG,IAE1B,QADIG,EAAK,KAAK,QAAQH,CAAG,EACjBK,EAAM,EAAGA,EAAMF,EAAIE,IACvBP,EAAOE,CAAG,EAAEK,CAAG,EAAID,CAG/B,EACA,WAAY,UAAW,CAEnB,QADIE,EAAS,CAAC,EACRA,EAAO,KAAK,CAAC,CAAC,EAAIT,GAAM,CAC9B,QAAQG,EAAM,EAAGA,EAAMH,EAAOG,IAE1B,QADIG,EAAK,KAAK,QAAQH,CAAG,EACjBK,EAAM,EAAGA,EAAMF,EAAIE,IACvBC,EAAON,CAAG,EAAEK,CAAG,EAAIP,EAAOE,CAAG,EAAEK,CAAG,EAG1C,OAAOC,CACX,CACJ,CAAC,CAEL",
  "names": ["spec", "_rows", "_array", "obj", "row", "a", "b", "rs", "value", "pos", "_clone"]
}
